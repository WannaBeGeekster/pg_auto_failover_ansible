---
- name: "check state on each data node"
  become_user: "{{ postgresql_cluster_user }}"
  shell: >
    PATH="$PATH:{{ postgresql_cluster_bin_path }}" pg_autoctl show state \
    --pgdata "{{ postgresql_cluster_data_dir }}" \
    --json
  when: not (postgresql_cluster_is_monitor | default('False') | bool)
  register: pg_autoctl_state

- name: Populate dict for state information
  set_fact:
    pg_autoctl_cluster_state: "{{ pg_autoctl_cluster_state|default({}) | combine( {item.nodename: item} ) }}"
  with_items:
    - "{{ pg_autoctl_state.stdout | from_json }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)

- name: "fail if any node has current_group_state != assigned_group_state"
  fail:
    msg: "assigned group state differs from current group state"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)
    and (pg_autoctl_cluster_state[host_ip].assigned_group_state != pg_autoctl_cluster_state[host_ip].current_group_state)

- name: "enable maintenance mode on secondaries"
  become_user: "{{ postgresql_cluster_user }}"
  shell: >
    PATH="$PATH:{{ postgresql_cluster_bin_path }}" pg_autoctl enable maintenance \
    --pgdata "{{ postgresql_cluster_data_dir }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)
    and (pg_autoctl_cluster_state[host_ip].assigned_group_state == 'secondary')

- name: "copy deb.sh to /tmp/pg_auto_failover_deb.sh"
  copy:
    src: "deb.sh"
    dest: "/tmp/pg_auto_failover_deb.sh"
    owner: root
    group: root
    mode: 0700

- name: "run /tmp/pg_auto_failover_deb.sh"
  command: "bash /tmp/pg_auto_failover_deb.sh"

- name: "uninstall postgresql-{{ postgresql_cluster_version }}-auto-failover-{{ postgresql_pg_auto_failover_version }}"
  apt: 
    name: "postgresql-{{ postgresql_cluster_version }}-auto-failover-{{ postgresql_pg_auto_failover_version }}"
    state: absent
    update_cache: "{{ apt_update_cache | default('True') }}"

- name: "uninstall pg-auto-failover-cli-{{ postgresql_pg_auto_failover_version }}"
  apt: 
    name: "pg-auto-failover-cli-{{ postgresql_pg_auto_failover_version }}"
    state: absent
    update_cache: "{{ apt_update_cache | default('True') }}"

- name: "install postgresql-{{ postgresql_cluster_version }}-auto-failover-{{ postgresql_new_pg_auto_failover_version }}"
  apt: 
    name: "postgresql-{{ postgresql_cluster_version }}-auto-failover-{{ postgresql_new_pg_auto_failover_version }}"
    state: present
    update_cache: "{{ apt_update_cache | default('True') }}"

- name: "install pg-auto-failover-cli-{{ postgresql_new_pg_auto_failover_version }}"
  apt: 
    name: "pg-auto-failover-cli-{{ postgresql_new_pg_auto_failover_version }}"
    state: present
    update_cache: "{{ apt_update_cache | default('True') }}"

- name: "restart monitor pg_auto_failover service"
  service:
    name: "{{ postgresql_cluster_daemon }}"
    state: "{{ postgresql_cluster_restarted_state }}"
  when: (postgresql_cluster_is_monitor | default('False') | bool)

- name: "ensure monitor pg_auto_failover service is started"
  service:
    name: "{{ postgresql_cluster_daemon }}"
    state: "started"
  when: (postgresql_cluster_is_monitor | default('False') | bool)

- name: "restart pg_auto_failover service on all data nodes"
  service:
    name: "{{ postgresql_cluster_daemon }}"
    state: "{{ postgresql_cluster_restarted_state }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)

# FIXME: wait for all nodes to be migrated

- name: "ensure pg_auto_failover service is started on all nodes"
  service:
    name: "{{ postgresql_cluster_daemon }}"
    state: "{{ postgresql_cluster_restarted_state }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)

- name: "disable maintenance mode on secondaries"
  become_user: "{{ postgresql_cluster_user }}"
  shell: >
    PATH="$PATH:{{ postgresql_cluster_bin_path }}" pg_autoctl disable maintenance \
    --pgdata "{{ postgresql_cluster_data_dir }}"
  when: not (postgresql_cluster_is_monitor | default('False') | bool)
    and (pg_autoctl_cluster_state[host_ip].assigned_group_state == 'secondary')

